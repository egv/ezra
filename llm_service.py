import os
import logging
from typing import List
from openai import AsyncOpenAI

logger = logging.getLogger(__name__)


class LLMService:
    def __init__(self):
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY environment variable is required")
        
        self.client = AsyncOpenAI(api_key=api_key)
        self.model = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")

    async def generate_digest(self, messages: List[str]) -> str:
        if not messages:
            return "ðŸ“° *Daily Digest - No new messages*\n\nNo new messages were found in monitored channels today."
        
        try:
            combined_messages = "\n\n---\n\n".join(messages)
            
            system_prompt = """Create a telegram message. NEVER use code blocks. NEVER use # headers.

Example output:
*AI News* ðŸ¤–
â€¢ DeepSeek released new model
â€¢ OpenAI updates API

*Tech Updates* ðŸ’»
â€¢ New JavaScript framework
â€¢ Database improvements

Maximum 2000 characters. Use only *bold* and bullets."""
            
            user_prompt = f"""Summarize these messages in telegram format. NO CODE BLOCKS!

{combined_messages[:3000]}

Output like the example - simple bullets and *bold* only."""

            response = await self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                max_tokens=800,
                temperature=0.3
            )
            
            digest_content = response.choices[0].message.content.strip()
            
            # FORCE removal of any code blocks or # headers the LLM might still generate
            import re
            digest_content = re.sub(r'```[\s\S]*?```', '', digest_content)  # Remove code blocks
            digest_content = re.sub(r'^#+\s*(.*)$', r'*\1*', digest_content, flags=re.MULTILINE)  # Convert headers to bold
            digest_content = digest_content.strip()
            
            header = f"ðŸ“° *Daily Digest - {self._get_current_date()}*\n\n"
            footer = f"\n\n---\n_Generated by Ezra Bot â€¢ {len(messages)} messages processed_"
            
            full_digest = header + digest_content + footer
            
            # Telegram message limit is 4096 characters
            if len(full_digest) > 4000:  # Leave some margin
                # Truncate and add truncation notice
                available_space = 4000 - len(header) - len(footer) - 50  # 50 for truncation notice
                truncated_content = digest_content[:available_space] + "...\n\n*[Truncated due to length]*"
                full_digest = header + truncated_content + footer
            
            return full_digest
            
        except Exception as e:
            logger.error(f"Error generating digest: {e}")
            return f"ðŸ“° *Daily Digest - Error*\n\nSorry, I encountered an error while generating today's digest. Please try again later.\n\nError: {str(e)}"

    def _get_current_date(self) -> str:
        from datetime import datetime
        return datetime.now().strftime("%B %d, %Y")